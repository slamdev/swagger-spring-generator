plugins {
    id 'base'
    id 'idea'
}

allprojects {
    group 'com.github.slamdev'
}

subprojects { Project module ->
    plugins.withId('java') {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        repositories {
            jcenter()
        }
        compileJava {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Werror'
        }
        compileTestJava {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Werror'
        }
    }
    plugins.withId('pmd') {
        pmd {
            toolVersion = '6.6.0'
            ignoreFailures = false
            consoleOutput = false
        }
        tasks.withType(Pmd) {
            if (name == 'pmdMain') {
                source = 'src/main/java'
                ruleSetFiles = files("${rootProject.projectDir}/config/pmd/ruleSetMain.xml")
                ruleSets = []
            } else {
                ruleSetFiles = files("${rootProject.projectDir}/config/pmd/ruleSetTest.xml")
                ruleSets = []
            }
            exclude '**/api/**'
        }
    }
    plugins.withId('checkstyle') {
        checkstyle {
            toolVersion = '8.11'
            ignoreFailures = false
            showViolations = false
        }
        tasks.withType(Checkstyle) {
            if (name == 'checkstyleMain') {
                source = 'src/main/java'
                configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyleMain.xml")
            } else {
                configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyleTest.xml")
            }
            exclude '**/api/**'
        }
        dependencies {
            checkstyle 'com.thomasjensen.checkstyle.addons:checkstyle-addons:5.2.0'
            checkstyle 'com.github.sevntu-checkstyle:sevntu-checks:1.29.0'
        }

    }
    plugins.withId('findbugs') {
        findbugs {
            toolVersion = '3.0.1'
            ignoreFailures = false
            effort = 'max'
            reportLevel = 'low'
        }
        tasks.withType(FindBugs) {
            if (name == 'findbugsMain') {
                excludeFilter = file("${rootProject.projectDir}/config/findbugs/excludeMain.xml")
            } else {
                excludeFilter = file("${rootProject.projectDir}/config/findbugs/excludeTest.xml")
            }
            pluginClasspath = project.configurations.findbugsPlugins
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }
        dependencies {
            findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.2.1'
            findbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
            findbugsPlugins 'com.digitalreasoning.sdp:findbugs-extensions-drs:1.1.0'
        }
    }
}
